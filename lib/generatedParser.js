/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,8],$V2=[1,9],$V3=[1,12],$V4=[5,7,20,21,22,24],$V5=[5,7,11,12,13,14,20,21,22,24],$V6=[5,7,11,12,20,21,22,24];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"topLevel":3,"regex":4,"tEND":5,"expr":6,"|":7,"chunk":8,"repetition":9,"repetitionHead":10,"?":11,"+":12,"*":13,"{":14,"repetitionRepr":15,"}":16,",":17,"tNUM":18,"group":19,"tCHAR":20,"tBACKREF":21,"(":22,"groupGuts":23,")":24,"specialGroup":25,"subroutine":26,"noCapture":27,"atomic":28,"tNOCAPTURE":29,"tATOMIC":30,"$accept":0,"$end":1},
terminals_: {2:"error",5:"tEND",7:"|",11:"?",12:"+",13:"*",14:"{",16:"}",17:",",18:"tNUM",20:"tCHAR",21:"tBACKREF",22:"(",24:")",29:"tNOCAPTURE",30:"tATOMIC"},
productions_: [0,[3,2],[3,1],[4,1],[4,2],[4,3],[6,1],[6,2],[9,1],[9,2],[9,2],[10,1],[10,1],[10,1],[10,3],[15,1],[15,2],[15,2],[15,3],[8,1],[8,1],[8,1],[19,3],[23,1],[23,1],[23,1],[25,1],[25,1],[27,2],[28,2],[26,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 return [[]]; 
break;
case 3:
 this.$ = [[$$[$0]]]; 
break;
case 4:

      $$[$0-1][$$[$0-1].length-1].push($$[$0]);
      this.$ = $$[$0-1];
    
break;
case 5:
 this.$ = $$[$0-2].concat($$[$0]); 
break;
case 6:

      $$[$0].repetition = {
        range: [1,1],
        type: 'greedy'
      };
      this.$ = $$[$0];
    
break;
case 7:

      $$[$0-1].repetition = $$[$0];
      this.$ = $$[$0-1];
    
break;
case 8:

      this.$ = {
        range: $$[$0],
        type: 'greedy'
      };
    
break;
case 9:

      this.$ = {
        range: $$[$0-1],
        type: 'lazy'
      };
    
break;
case 10:

      this.$ = {
        range: $$[$0-1],
        type: 'possessive'
      };
    
break;
case 11:
 this.$ = [0,1]; 
break;
case 12:
 this.$ = [1,9007199254740990]; 
break;
case 13: case 15:
 this.$ = [0,9007199254740990]; 
break;
case 14:
 this.$ = $$[$0-1]; 
break;
case 16:
 this.$ = [parseInt($$[$0-1]),9007199254740990]; 
break;
case 17:
 this.$ = [0,parseInt($$[$0])]; 
break;
case 18:
 this.$ = [parseInt($$[$0-2]),parseInt($$[$0])]; 
break;
case 20:

      this.$ = {
        type: 'SINGLECHAR',
        value: $$[$0]
      };
    
break;
case 21:

      this.$ = {
        type: 'BACKREF',
        value: parseInt($$[$0].slice(1))
      };
    
break;
case 22:
 this.$ = $$[$0-1] 
break;
case 23:

      this.$ = {
        type: 'GROUP',
        grouptype: 'CAPTURE',
        value: $$[$0]
      };
    
break;
case 28:

      this.$ = {
        type: 'GROUP',
        grouptype: 'NOCAPTURE',
        value: $$[$0]
      };
    
break;
case 29:

      this.$ = {
        type: 'GROUP',
        grouptype: 'ATOMIC',
        value: $$[$0]
      };
    
break;
case 30:

      this.$ = {
        type: 'SUBROUTINE',
        value: parseInt($$[$0])
      };
    
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,8:5,19:6,20:$V0,21:$V1,22:$V2},{1:[3]},{5:[1,10],6:11,7:$V3,8:5,19:6,20:$V0,21:$V1,22:$V2},{1:[2,2]},o($V4,[2,3]),o($V4,[2,6],{9:13,10:14,11:[1,15],12:[1,16],13:[1,17],14:[1,18]}),o($V5,[2,19]),o($V5,[2,20]),o($V5,[2,21]),{4:20,6:4,8:5,11:[1,25],19:6,20:$V0,21:$V1,22:$V2,23:19,25:21,26:22,27:23,28:24,29:[1,26],30:[1,27]},{1:[2,1]},o($V4,[2,4]),{4:28,6:4,8:5,19:6,20:$V0,21:$V1,22:$V2},o($V4,[2,7]),o($V4,[2,8],{11:[1,29],12:[1,30]}),o($V6,[2,11]),o($V6,[2,12]),o($V6,[2,13]),{15:31,17:[1,32],18:[1,33]},{24:[1,34]},{6:11,7:$V3,8:5,19:6,20:$V0,21:$V1,22:$V2,24:[2,23]},{24:[2,24]},{24:[2,25]},{24:[2,26]},{24:[2,27]},{18:[1,35]},{4:36,6:4,8:5,19:6,20:$V0,21:$V1,22:$V2},{4:37,6:4,8:5,19:6,20:$V0,21:$V1,22:$V2},o([5,24],[2,5],{8:5,19:6,6:11,7:$V3,20:$V0,21:$V1,22:$V2}),o($V4,[2,9]),o($V4,[2,10]),{16:[1,38]},{16:[2,15],18:[1,39]},{17:[1,40]},o($V5,[2,22]),{24:[2,30]},{6:11,7:$V3,8:5,19:6,20:$V0,21:$V1,22:$V2,24:[2,28]},{6:11,7:$V3,8:5,19:6,20:$V0,21:$V1,22:$V2,24:[2,29]},o($V6,[2,14]),{16:[2,17]},{16:[2,16],18:[1,41]},{16:[2,18]}],
defaultActions: {3:[2,2],10:[2,1],21:[2,24],22:[2,25],23:[2,26],24:[2,27],35:[2,30],39:[2,17],41:[2,18]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}